{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Header/Header.js","App.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","clickCount","id","alt","name","src","image","Wrapper","children","Header","score","highscore","App","state","cards","gameOver","_this","setState","length","alert","concat","forEach","card","count","i","findIndex","console","log","sort","Math","random","componentDidUpdate","_this2","this","components_Wrapper_Wrapper","components_Header_Header","map","components_Card_Card","key","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"ssEAWeA,SARF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMM,WAAWN,EAAMO,MAC1DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,YCDxBC,SAFC,SAAAZ,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,YCS1CC,SATA,SAAAd,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASJ,EAAMa,UAC9BZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,UACUJ,EAAMe,MADhB,eACmCf,EAAMgB,qBC8H9BC,oNAhHbC,MAAQ,CACNC,QACAJ,MAAO,EACPC,UAAW,KAYbI,SAAW,WAmBT,OAlBIC,EAAKH,MAAMH,MAAQM,EAAKH,MAAMF,WAChCK,EAAKC,SAAS,CAACN,UAAWK,EAAKH,MAAMH,QAKpCM,EAAKH,MAAMH,QAAUM,EAAKH,MAAMC,MAAMI,OACvCC,MAAM,oBAAsBH,EAAKH,MAAMH,OAEvCS,MAAK,yBAAAC,OAA0BJ,EAAKH,MAAMH,QAK5CM,EAAKC,SAAS,CAACP,MAAO,IACtBM,EAAKH,MAAMC,MAAMO,QAAS,SAACC,GACzBA,EAAKC,MAAQ,KAER,KAQTtB,WAAa,SAACC,GAEZ,IAAIY,EAAQE,EAAKH,MAAMC,MAEnBU,EAAIV,EAAMW,UAAU,SAACH,GACvB,OAAOA,EAAKpB,KAAOA,IAGrBwB,QAAQC,IAAI,mBAAqBb,EAAMU,GAAGpB,MAIpB,IAAnBU,EAAMU,GAAGD,OACVT,EAAMU,GAAGD,OAAS,EAIlBT,EAAMc,KAAK,kBAAMC,KAAKC,SAAW,KAIjCd,EAAKC,SAAS,CACEP,MAAQM,EAAKH,MAAMH,MAAQ,EAC3BI,MAAQA,MAGxBY,QAAQC,IAAI,gCAAkCb,EAAMU,GAAGpB,MACvDY,EAAKD,eAYTgB,mBAAqB,WAGnBL,QAAQC,IAAI,oBACTX,EAAKH,MAAMH,QAAUM,EAAKH,MAAMC,MAAMI,QACvCF,EAAKD,oFASA,IAAAiB,EAAAC,KACP,OACErC,EAAAC,EAAAC,cAACoC,EAAD,KACEtC,EAAAC,EAAAC,cAACqC,EAAD,CAAQzB,MAAOuB,KAAKpB,MAAMH,MAAOC,UAAWsB,KAAKpB,MAAMF,WAAvD,eACCsB,KAAKpB,MAAMC,MAAMsB,IAAI,SAAAd,GAAI,OACxB1B,EAAAC,EAAAC,cAACuC,EAAD,CACEpC,WAAY+B,EAAK/B,WACjBC,GAAIoB,EAAKpB,GACToC,IAAKhB,EAAKpB,GACVI,MAAOgB,EAAKhB,kBAlHNiC,oBCNlBC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.d00c2ab7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => (\r\n  <div className=\"card\" onClick={() => props.clickCount(props.id)}>\r\n    <div className=\"img-container\">\r\n      <img alt={props.name} src={props.image} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = props => (\r\n  <div className=\"header\">\r\n    <div className=\"title\">{props.children}</div>\r\n    <div className=\"scores\">\r\n      Score: {props.score} Highscore: {props.highscore}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./components/Card\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Header from \"./components/Header\";\r\nimport cards from \"./cards.json\";\r\nimport \"./App.css\";\r\n\r\n\r\n/**\r\n *  This is the main App component. \r\n */\r\nclass App extends Component {\r\n  \r\n  /**\r\n   *  The App's state consists of\r\n   *  a) cards : an array of Looney Tunes characters (represented by Bootstrap cards)\r\n   *  b) score : this is the running score for the current game. \r\n   *     Each time the user clicks on a character that hasn't been clicked before, the score is incremented.\r\n   *  c) highscore: This is the highest score attained so far. The maximum possible value is the number of cards.\r\n   *     This happens when the user clicks all characters exactly once. \r\n   */\r\n  state = {\r\n    cards,\r\n    score: 0,\r\n    highscore: 0\r\n  };\r\n\r\n  /**\r\n   * @function: gameOver\r\n   * \r\n   * This method is invoked when the game is over.\r\n   * \r\n   * The game is over when either\r\n   * a) the user clicks on any character more than once (loss)\r\n   * b) the user clicks on all characters exactly once (win)\r\n   */\r\n  gameOver = () => {\r\n    if (this.state.score > this.state.highscore) {\r\n      this.setState({highscore: this.state.score});\r\n    }\r\n\r\n    /* If the user clicked each card exactly once, they win.\r\n       Otherwise they lose. */\r\n    if(this.state.score === this.state.cards.length){\r\n      alert(\"You win \\nscore: \" + this.state.score);\r\n    } else {\r\n      alert(`Game Over :( \\nscore: ${this.state.score}`);\r\n    }\r\n\r\n    /*  New game : reset 'score' to 0 and the click count \r\n        for each character */\r\n    this.setState({score: 0});\r\n    this.state.cards.forEach( (card) => {\r\n      card.count = 0;\r\n    });\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @function: clickCount\r\n   * \r\n   * Callback function invoked each time the user clicks on a card.\r\n   */\r\n  clickCount = (id) => {\r\n\r\n    let cards = this.state.cards;\r\n    \r\n    let i = cards.findIndex((card) => {\r\n      return(card.id === id);\r\n    });\r\n\r\n    console.log(\"User clicked on \" + cards[i].name);\r\n\r\n    /* If the character has a click count of 0, it hasn't been clicked before.\r\n       Increment user's score and shuffle the cards */\r\n    if(cards[i].count === 0){\r\n      cards[i].count += 1;\r\n\r\n      /* Call the array sort function, with the compareFunction returning a \r\n         random sort order */\r\n      cards.sort(() => Math.random() - 0.5);\r\n\r\n      /* Update the App's state to reflect the new score, and the re-shuffled\r\n         cards */\r\n      this.setState({\r\n                      score : this.state.score + 1,\r\n                      cards : cards\r\n                    });\r\n    } else {\r\n      console.log(\"oops, you've already clicked \" + cards[i].name);\r\n      this.gameOver();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @function: componentDidUpdate\r\n   * \r\n   * Component update callback function for this app. \r\n   * \r\n   * Checks if the user has clicked on each card exactly once.\r\n   * If so, the game is over and the user wins.\r\n   */\r\n  componentDidUpdate = () =>{\r\n    /* If the user has clicked on each card exactly once, the score should \r\n       equal the number of cards (characters). The user wins and the game is over. */\r\n    console.log(\"Onchange invoked\");\r\n    if(this.state.score === this.state.cards.length){\r\n      this.gameOver();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @function: render\r\n   * \r\n   * Render function for this App.\r\n   */\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <Header score={this.state.score} highscore={this.state.highscore}>Clicky Game</Header>\r\n        {this.state.cards.map(card => (\r\n          <Card\r\n            clickCount={this.clickCount}\r\n            id={card.id}\r\n            key={card.id}\r\n            image={card.image}\r\n          />\r\n        ))}\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}